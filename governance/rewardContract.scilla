scilla_version 0

import IntUtils BoolUtils

library Reward
    let zero_uint128 = Uint128 0
    let zero_address = 0x0000000000000000000000000000000000000000
    let zero_bnum = BNum 0

    let one_uint128 = Uint128 1

    let false = False

    let decode_uint128 = 
        fun (some_value: Option Uint128) =>
            match some_value with 
                | Some value => value
                | None => zero_uint128
            end

    let decode_address = 
        fun (some_address: Option ByStr20) => 
            match some_address with 
                | Some address => address
                | None => zero_address
            end

    type Error =
    | CallerNotAdmin
    | CodeIsSender
    | CannotBeZero

    let make_error =
        fun (result : Error) =>
            let result_code = 
                match result with
                | CallerNotAdmin                 => Int32 -901
                | CodeIsSender                   => Int32 -902
                | CannotBeZero                   => Int32 -903
                end
            in
            { _exception : "Error"; code : result_code }

  type Reward = | Reward of Uint32 ByStr20 Uint128

  let one_msg = 
    fun (msg : Message) => 
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg

contract RewardContract
(
    init_admin: ByStr20
)

field admin: ByStr20 = init_admin
field pending_admin : Option ByStr20 = None {ByStr20}
field rewardPerEpoch: Map Uint32 (Map ByStr20 Uint128) = Emp Uint32 (Map ByStr20 Uint128)
field rewardClaimedPerEpoch: Map Uint32 (Map ByStr20 Uint128) = Emp Uint32 (Map ByStr20 Uint128)
field collateralForEpoch: Map Uint32 ByStr20 = Emp Uint32 ByStr20

field gzilStakingContract: ByStr20 = zero_address

procedure ThrowError(err : Error)
  e = make_error err;
  throw 
end

procedure IsAdmin(address: ByStr20)
  adm <- admin;
  is_adm = builtin eq address adm;
  match is_adm with
    | True =>
    | False => 
      err = CallerNotAdmin;
      ThrowError err
  end
end

procedure IsNotZero(value: Uint128)
  is_zero = builtin eq value zero_uint128;
  match is_zero with
    | False =>
    | True =>
      err = CannotBeZero;
      ThrowError err
  end
end

procedure IsNotZeroAddress(address: ByStr20)
  is_zero = builtin eq address zero_address;
  match is_zero with
    | False =>
    | True =>
      err = CannotBeZero;
      ThrowError err
  end
end

procedure IsNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = CodeIsSender;
    ThrowError err
  | False =>
  end
end

transition RequestAdminTransfer (new_admin : ByStr20)
  IsAdmin _sender;
  IsNotSender new_admin;
  pa = Some {ByStr20} new_admin;
  pending_admin := pa
end

transition ConfirmAdminTransfer ()
  optional_pa <- pending_admin;
  match optional_pa with
  | Some pend_admin =>
      caller_is_new_admin = builtin eq _sender pend_admin;
      match caller_is_new_admin with
      | True =>
          admin := pend_admin;
          none = None {ByStr20};
          pending_admin := none;
          e = {_eventname : "TransferOwnership"; newAdmin : pend_admin};
          event e
      | False =>
      end
  | None =>
  end
end

procedure noteReward(reward: Reward)
  match reward with
    | Reward epoch address amount =>
      rewardPerEpoch[epoch][address] := amount
  end
end

transition registerReward(list: List Reward)
  IsAdmin _sender;
  forall list noteReward
end

transition EditReward(reward: Reward)
  IsAdmin _sender;
  noteReward reward
end

procedure SafeTransferFrom(tokenContract: ByStr20, from: ByStr20, to: ByStr20, amount: Uint128)
    msg_to_token_contract = {_tag: "TransferFrom"; _recipient: tokenContract; _amount: zero_uint128;
                                    from: from; to: to; amount: amount
                                };
    msgs = one_msg msg_to_token_contract;
    send msgs
end

transition claimReward(epoch: Uint32)
  some_collateral <- collateralForEpoch[epoch];
  collateralToken = decode_address some_collateral;
  IsNotZeroAddress collateralToken;

  spender <- gzilStakingContract;
  IsNotZeroAddress spender;

  some_rewardAvailable <- rewardPerEpoch[epoch][_sender];
  rewardAvailable = decode_uint128 some_rewardAvailable;

  some_rewardClaimed <- rewardClaimedPerEpoch[epoch][_sender];
  rewardClaimed = decode_uint128 some_rewardClaimed;
  
  rewardToWithdraw = builtin sub rewardAvailable rewardClaimed;
  IsNotZero rewardToWithdraw;
  
  totalRewardClaimed = builtin add rewardClaimed rewardToWithdraw;
  rewardPerEpoch[epoch][_sender] := totalRewardClaimed;
  
  SafeTransferFrom collateralToken spender _sender  rewardToWithdraw

end